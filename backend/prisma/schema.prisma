// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl= env("SHADOW_DATABASE_URL") 
}

model User {
  id              String             @id @default(uuid())
  name            String  
  email           String             @unique
  password        String
  preferences     UserPreference[]
  createdAt       DateTime           @default(now())
  recommendations Movie[]            @relation("UserRecommendations")
  collab_embed    Float[]
  content_embed   Unsupported("vector(2000)")?
}

model Movie {
  id              Int                @id @default(autoincrement())
  title           String
  genre           String[]           // Stored as Postgres text[]
  year            Int?
  posterUrl       String?
  tmdbId          Int                @unique
  voteAverage     Float
  overview        String
  releaseDate     DateTime?
  preferences     UserPreference[]
  recommendedTo   User[]     @relation("UserRecommendations")
}

model UserPreference {
  id              Int                @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  movie           Movie             @relation(fields: [movieId], references: [tmdbId])
  movieId         Int
  rating          Int
  genres          Genre[]            @relation("UserGenres")
  seen            Boolean            @default(true)
  createdAt       DateTime           @default(now())

  @@unique([userId, movieId]) // Ensure one preference per user per movie
}

model Genre {
  id     Int              @id
  name   String
  users  UserPreference[] @relation("UserGenres")
}

